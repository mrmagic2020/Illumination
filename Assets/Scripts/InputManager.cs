//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""9abe608a-3f18-4b32-8350-edb77e93be49"",
            ""actions"": [
                {
                    ""name"": ""iTopLight"",
                    ""type"": ""Value"",
                    ""id"": ""57d03aae-4f06-49b0-8e56-3e11df869e36"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""3a76ec02-4a21-4389-9d37-72b197ebc85e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Scroll"",
                    ""id"": ""da7a34e2-5454-4b36-a054-36b9e4bcf7e9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""iTopLight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2fb42a92-31dc-4ab1-95c9-6af88d47a5ff"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""iTopLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9011ce3a-5963-4cee-9e02-a2ff580efa16"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""iTopLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b797c828-cc94-476a-a5b1-00971619468c"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61b29644-16a9-404d-b3f8-04ba950d58a4"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameLoader"",
            ""id"": ""4788b93f-0ff9-4874-bbc2-168fdac976f2"",
            ""actions"": [
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""993609e2-dbae-4f48-ba83-526ffd4a2735"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New"",
                    ""type"": ""Button"",
                    ""id"": ""00036851-4866-42d0-a2a2-c4d72d6203bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""6a72cb77-c028-4769-a5c5-ac9159737ed3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1b6c186-7b1d-43f4-a0a5-425a3fcfbcc7"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9705c1fa-e57a-4ad5-b967-54c3fea82d4e"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""212a7c97-9bd0-4fd3-b199-e75b48889e2e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3db06dd-0755-459b-90b6-1aa8abb09e78"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standard PC"",
                    ""action"": ""New"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""412cfd80-e1b5-4970-b0fb-787cc7bb82b8"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4149f6f3-68a4-433a-8322-e8e900e5c92a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1196c19-9d13-4e9c-8d45-bd2da26a5733"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Standard PC"",
            ""bindingGroup"": ""Standard PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_iTopLight = m_Menu.FindAction("iTopLight", throwIfNotFound: true);
        m_Menu_Click = m_Menu.FindAction("Click", throwIfNotFound: true);
        // GameLoader
        m_GameLoader = asset.FindActionMap("GameLoader", throwIfNotFound: true);
        m_GameLoader_Delete = m_GameLoader.FindAction("Delete", throwIfNotFound: true);
        m_GameLoader_New = m_GameLoader.FindAction("New", throwIfNotFound: true);
        m_GameLoader_Load = m_GameLoader.FindAction("Load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_iTopLight;
    private readonly InputAction m_Menu_Click;
    public struct MenuActions
    {
        private @InputManager m_Wrapper;
        public MenuActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @iTopLight => m_Wrapper.m_Menu_iTopLight;
        public InputAction @Click => m_Wrapper.m_Menu_Click;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @iTopLight.started += instance.OnITopLight;
            @iTopLight.performed += instance.OnITopLight;
            @iTopLight.canceled += instance.OnITopLight;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @iTopLight.started -= instance.OnITopLight;
            @iTopLight.performed -= instance.OnITopLight;
            @iTopLight.canceled -= instance.OnITopLight;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // GameLoader
    private readonly InputActionMap m_GameLoader;
    private List<IGameLoaderActions> m_GameLoaderActionsCallbackInterfaces = new List<IGameLoaderActions>();
    private readonly InputAction m_GameLoader_Delete;
    private readonly InputAction m_GameLoader_New;
    private readonly InputAction m_GameLoader_Load;
    public struct GameLoaderActions
    {
        private @InputManager m_Wrapper;
        public GameLoaderActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Delete => m_Wrapper.m_GameLoader_Delete;
        public InputAction @New => m_Wrapper.m_GameLoader_New;
        public InputAction @Load => m_Wrapper.m_GameLoader_Load;
        public InputActionMap Get() { return m_Wrapper.m_GameLoader; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameLoaderActions set) { return set.Get(); }
        public void AddCallbacks(IGameLoaderActions instance)
        {
            if (instance == null || m_Wrapper.m_GameLoaderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameLoaderActionsCallbackInterfaces.Add(instance);
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
            @New.started += instance.OnNew;
            @New.performed += instance.OnNew;
            @New.canceled += instance.OnNew;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(IGameLoaderActions instance)
        {
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
            @New.started -= instance.OnNew;
            @New.performed -= instance.OnNew;
            @New.canceled -= instance.OnNew;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(IGameLoaderActions instance)
        {
            if (m_Wrapper.m_GameLoaderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameLoaderActions instance)
        {
            foreach (var item in m_Wrapper.m_GameLoaderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameLoaderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameLoaderActions @GameLoader => new GameLoaderActions(this);
    private int m_StandardPCSchemeIndex = -1;
    public InputControlScheme StandardPCScheme
    {
        get
        {
            if (m_StandardPCSchemeIndex == -1) m_StandardPCSchemeIndex = asset.FindControlSchemeIndex("Standard PC");
            return asset.controlSchemes[m_StandardPCSchemeIndex];
        }
    }
    public interface IMenuActions
    {
        void OnITopLight(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IGameLoaderActions
    {
        void OnDelete(InputAction.CallbackContext context);
        void OnNew(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
